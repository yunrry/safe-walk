# .github/workflows/deploy.yml
name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: safe-walk
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # .env 파일 생성
            cat > .env << EOF
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY=safe-walk
            IMAGE_TAG=latest
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=3306
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_NAME=${{ secrets.DB_NAME }}
            SERVER_PORT=8080
            SPRING_PROFILES_ACTIVE=prod
            KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
            EOF
            
            # AWS CLI 및 Docker 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 배포
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
            docker image prune -f

#   헬스체크
#            echo "애플리케이션 시작 대기 중..."
#            sleep 30
#
#            for i in {1..12}; do
#              if curl -f -s https://3.37.162.146/api/swagger-ui/index.html > /dev/null; then
#               echo "✅ 애플리케이션 정상 시작됨 (${i}0초 후)"
#                break
#              else
#                echo "⏳ 대기 중... (${i}0초)"
#                if [ $i -eq 12 ]; then
#                  echo "❌ 헬스체크 실패"
#                  docker logs safe_walk_app --tail 50
#                  exit 1
#                fi
#                sleep 10
#              fi
#            done
#
            # 사용하지 않는 이미지 정리
#            docker image prune -f
      
#            echo "🚀 배포 완료!"